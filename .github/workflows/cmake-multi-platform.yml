name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    # Install dependencies for Ubuntu
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y libgl1-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev ninja-build

    # Install dependencies for macOS
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install ninja

    # Set up MSVC on Windows
    - name: Set up MSVC (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

    # Set reusable strings
    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Configure CMake
    - name: Configure CMake
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=Release \
        -G "Ninja" \
        -S ${{ github.workspace }}

    # Build the project
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    # Run tests
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      env:
        DISPLAY: ':0' # Necessary for GUI tests on Ubuntu
      run: ctest --output-on-failure --build-config Release
