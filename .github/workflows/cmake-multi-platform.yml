name: CI Build

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Ubuntu setup
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build qt6-base-dev qt6-tools-dev qt6-tools-dev-tools qt6-l10n-tools libgl1-mesa-dev libglu1-mesa-dev
          echo "CMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu/cmake/Qt6" >> $GITHUB_ENV

      # macOS setup
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ninja qt
          echo "CMAKE_PREFIX_PATH=$(brew --prefix qt)" >> $GITHUB_ENV

      # Cache Qt Source for Windows
      - name: Cache Qt Source
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}\qt-source
          key: qt-source-${{ env.QT_VERSION }}
        env:
          QT_VERSION: 6.5.3

      # Windows setup with Visual Studio and Qt
      - name: Set up Visual Studio and Download/Build Qt (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          QT_VERSION: 6.5.3
        run: |
          # Set up Visual Studio environment
          Write-Host "Setting up Visual Studio environment"
          $vsPath = & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          $env:Path += ";$vsPath\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64"
          & "$vsPath\Common7\Tools\VsDevCmd.bat"

          # Define source directory
          $qtSourceDir = "$env:TEMP\qt-source"
          New-Item -ItemType Directory -Path $qtSourceDir -Force

          # Download Qt source if not cached
          if (!(Test-Path "$qtSourceDir\qt-everywhere-src-$env:QT_VERSION.zip")) {
            Write-Host "Downloading Qt Source"
            $qtSourceUrl = "https://download.qt.io/official_releases/qt/6.5/$env:QT_VERSION/single/qt-everywhere-src-$env:QT_VERSION.zip"
            Invoke-WebRequest -Uri $qtSourceUrl -OutFile "$qtSourceDir\qt-everywhere-src-$env:QT_VERSION.zip"
            Expand-Archive -Path "$qtSourceDir\qt-everywhere-src-$env:QT_VERSION.zip" -DestinationPath $qtSourceDir
          }

          # Configure and build Qt using Ninja
          Write-Host "Configuring and building Qt with Ninja"
          cd "$qtSourceDir\qt-everywhere-src-$env:QT_VERSION\qtbase"
          .\configure.bat -top-level -prefix C:\Qt -release -opensource -confirm-license -nomake examples -nomake tests -platform win32-msvc -cmake-generator Ninja
          cmake --build . --parallel
          cmake --install .

          # Set environment variables for Qt
          Write-Host "Setting Qt environment variables"
          echo "Qt6_DIR=C:\Qt\lib\cmake\Qt6" >> $GITHUB_ENV
          echo "QT_PLUGIN_PATH=C:\Qt\plugins" >> $GITHUB_ENV
          echo "QML2_IMPORT_PATH=C:\Qt\qml" >> $GITHUB_ENV

      # CMake configuration and build for Windows
      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cmake -B "${{ github.workspace }}\build" -G "Ninja" -S "${{ github.workspace }}" `
            -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DCMAKE_BUILD_TYPE=Release
        env:
          Qt6_DIR: C:\Qt\lib\cmake\Qt6
          QT_PLUGIN_PATH: C:\Qt\plugins
          QML2_IMPORT_PATH: C:\Qt\qml

      - name: Build project (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: cmake --build "${{ github.workspace }}\build" --config Release

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        working-directory: "${{ github.workspace }}\build"
        run: ctest --output-on-failure --build-config Release
