name: Build and Release

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_extension: tar.gz
          - os: macos-latest
            artifact_extension: zip
          - os: windows-latest
            artifact_extension: zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Ubuntu Section
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build \
            qt6-base-dev qt6-tools-dev qt6-tools-dev-tools \
            qt6-l10n-tools libgl1-mesa-dev libglu1-mesa-dev rsync
      shell: bash

    - name: Configure CMake (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S .
      shell: bash

    - name: Build application (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: cmake --build build --config Release
      shell: bash

    - name: Package application (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build
        tar -czvf application.tar.gz .
      shell: bash

    # macOS Section
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja qt
      shell: bash

    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Ninja" -S .
      shell: bash

    - name: Build application (macOS)
      if: matrix.os == 'macos-latest'
      run: cmake --build build --config Release
      shell: bash

    - name: Package application (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd build
        hdiutil create -volname Application -srcfolder . -ov -format UDZO application.dmg
        zip application.zip application.dmg
      shell: bash

    # Windows Section
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install visualstudio2022buildtools -y --install-arguments \
          '--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --quiet --norestart'
        choco install qt --version=6.5.3 -y
        choco install ninja -y
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
      shell: cmd

    - name: Verify Visual Studio Build Tools
      if: matrix.os == 'windows-latest'
      run: |
        $vcvarsPath = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
        if (!(Test-Path $vcvarsPath)) {
            Write-Output "Visual Studio Build Tools not found at $vcvarsPath. Installation failed or incorrect path."
            Get-ChildItem -Path "C:\Program Files (x86)\Microsoft Visual Studio" -Recurse -Filter vcvars64.bat
            exit 1
        } else {
            Write-Output "Found Visual Studio Build Tools at $vcvarsPath"
        }
      shell: pwsh

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat" && ^
        cmake -B build ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DCMAKE_PREFIX_PATH="C:\Qt\6.5.3\msvc2019_64\lib\cmake" ^
          -G Ninja ^
          -S .
      shell: cmd

    - name: Build application (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat" && ^
        cmake --build build --config Release
      shell: cmd

    - name: Package application (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build
        Compress-Archive -Path . -DestinationPath application.zip
      shell: cmd

    # Upload Artifacts
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: application-${{ matrix.os }}
        path: build/application.${{ matrix.artifact_extension }}
