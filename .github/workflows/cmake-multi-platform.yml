name: CI Build

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      ### Ubuntu Dependencies
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build \
              qt6-base-dev qt6-tools-dev qt6-tools-dev-tools \
              qt6-l10n-tools libgl1-mesa-dev libglu1-mesa-dev
          echo "CMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu/cmake/Qt6" >> $GITHUB_ENV

      ### macOS Dependencies
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ninja qt
          echo "CMAKE_PREFIX_PATH=$(brew --prefix qt)" >> $GITHUB_ENV

      ### Windows: Install Qt using jurplel/install-qt-action
      - name: Install Qt (Windows)
        if: matrix.os == 'windows-latest'
        uses: jurplel/install-qt-action@v2
        with:
          version: '6.5.3'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          modules: qtcharts
          setup-python: false

      # Configure CMake
      - name: Configure CMake
        run: |
          cmake -B "${{ github.workspace }}/build" \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=Release \
            -G "Ninja" \
            -S "${{ github.workspace }}"

      # Build project
      - name: Build
        run: cmake --build "${{ github.workspace }}/build" --config Release

      # Run tests
      - name: Test
        working-directory: "${{ github.workspace }}/build"
        run: ctest --output-on-failure --build-config Release
