name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    # Install dependencies for Ubuntu
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build qt6-base-dev qt6-base-dev-tools qt6-qmake
        echo "CMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu/cmake/Qt6" >> $GITHUB_ENV

    # Install dependencies for macOS
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja qt
        echo "CMAKE_PREFIX_PATH=$(brew --prefix qt)" >> $GITHUB_ENV

    # Set up Visual Studio Build Tools (Windows)
    - name: Set up Visual Studio Build Tools (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install visualstudio2019buildtools -y
        choco install ninja -y
        $vs_path = (vswhere -products * -latest -property installationPath)
        echo "VS_PATH=$vs_path" >> $GITHUB_ENV
        echo "$vs_path\MSBuild\Current\Bin" >> $GITHUB_ENV
        echo "CMAKE_CXX_COMPILER=cl" >> $GITHUB_ENV
        echo "CMAKE_C_COMPILER=cl" >> $GITHUB_ENV
        & "$vs_path\VC\Auxiliary\Build\vcvars64.bat"
      shell: powershell

    # Configure CMake for Ubuntu and macOS
    - name: Configure CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cmake -B ${{ github.workspace }}/build \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=Release \
        -G "Ninja" \
        -S ${{ github.workspace }}

    # Configure CMake for Windows
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B ${{ github.workspace }}/build \
        -DCMAKE_CXX_COMPILER=cl \
        -DCMAKE_C_COMPILER=cl \
        -DCMAKE_BUILD_TYPE=Release \
        -G "Ninja" \
        -S ${{ github.workspace }}
      shell: cmd

    # Build the project
    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config Release

    # Run tests
    - name: Test
      working-directory: ${{ github.workspace }}/build
      env:
        DISPLAY: ':0' # Necessary for GUI tests on Ubuntu
      run: ctest --output-on-failure --build-config Release
