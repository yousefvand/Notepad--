name: CI Build

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Qt on Ubuntu and macOS
        if: runner.os != 'Windows'
        run: |
          sudo apt-get update -y || brew update
          sudo apt-get install -y qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools || brew install qt
        env:
          Qt6_DIR: /usr/local/opt/qt/lib/cmake/Qt6
          QT_PLUGIN_PATH: /usr/local/opt/qt/plugins
          QML2_IMPORT_PATH: /usr/local/opt/qt/qml

      - name: Install Ninja on Windows
        if: runner.os == 'Windows'
        run: choco install ninja -y

      - name: Set up and Build Qt on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          QT_VERSION: 6.5.3
        run: |
          # Set up Visual Studio environment
          $vsPath = & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          $env:Path += ";$vsPath\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64"
          & "$vsPath\Common7\Tools\VsDevCmd.bat"

          # Define source directory for caching
          $qtSourceDir = "$env:TEMP\qt-source"
          New-Item -ItemType Directory -Path $qtSourceDir -Force

          # Check cache and download Qt source if necessary
          if (!(Test-Path "$qtSourceDir\qt-everywhere-src-$env:QT_VERSION.zip")) {
            Write-Host "Downloading Qt Source"
            $qtSourceUrl = "https://download.qt.io/official_releases/qt/6.5/$env:QT_VERSION/single/qt-everywhere-src-$env:QT_VERSION.zip"
            Invoke-WebRequest -Uri $qtSourceUrl -OutFile "$qtSourceDir\qt-everywhere-src-$env:QT_VERSION.zip"
            Expand-Archive -Path "$qtSourceDir\qt-everywhere-src-$env:QT_VERSION.zip" -DestinationPath $qtSourceDir
          }

          # Configure and build Qt using Ninja
          cd "$qtSourceDir\qt-everywhere-src-$env:QT_VERSION\qtbase"
          .\configure.bat -top-level -prefix C:\Qt -release -opensource -confirm-license -nomake examples -nomake tests -platform win32-msvc -cmake-generator Ninja
          cmake --build . --parallel
          cmake --install .

          # Set environment variables for Qt
          echo "Qt6_DIR=C:\Qt\lib\cmake\Qt6" >> $GITHUB_ENV
          echo "QT_PLUGIN_PATH=C:\Qt\plugins" >> $GITHUB_ENV
          echo "QML2_IMPORT_PATH=C:\Qt\qml" >> $GITHUB_ENV

      # CMake configuration for all OSes
      - name: Configure CMake
        run: cmake -B build -G "Ninja" -S . -DCMAKE_BUILD_TYPE=Release
        env:
          Qt6_DIR: ${{ runner.os == 'Windows' && 'C:\Qt\lib\cmake\Qt6' || '/usr/local/opt/qt/lib/cmake/Qt6' }}
          QT_PLUGIN_PATH: ${{ runner.os == 'Windows' && 'C:\Qt\plugins' || '/usr/local/opt/qt/plugins' }}
          QML2_IMPORT_PATH: ${{ runner.os == 'Windows' && 'C:\Qt\qml' || '/usr/local/opt/qt/qml' }}

      - name: Build Project
        run: cmake --build build --config Release

      - name: Run Tests
        working-directory: build
        run: ctest --output-on-failure
