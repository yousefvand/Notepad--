name: CI Build

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    ### Windows Setup with Correct Qt Installation
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        choco install visualstudio2022buildtools -y
        choco install ninja -y
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y

        # Download Qt Installer
        $installer = "qt-unified-windows-x64-online.exe"
        Invoke-WebRequest -Uri "https://download.qt.io/official_releases/online_installers/qt-unified-windows-x64-online.exe" `
                          -OutFile $installer -TimeoutSec 1200

        # Install Qt in batch mode
        Start-Process -FilePath $installer -ArgumentList `
          '--accept-messages', '--confirm-command', '--no-interaction', `
          '--silent', '--root C:\Qt', `
          '--install qt.qt6.653.win64_msvc2019_64' -Wait

        # Verify Qt installation
        if (!(Test-Path "C:\Qt\6.5.3\msvc2019_64")) {
          throw "Qt installation failed!"
        }

    - name: Save Qt cache (Windows)
      if: matrix.os == 'windows-latest' && steps.restore.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      with:
        path: C:\Qt
        key: qt-windows-6.5.3

    - name: Set up MSVC environment (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        FOR /F "tokens=*" %%i IN ('"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" ^
          -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath') DO SET VS_PATH=%%i
        IF NOT DEFINED VS_PATH (
          echo Visual Studio Build Tools not found! && exit /b 1
        )
        SET "VS_VARS_CMD=%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"
        CALL "%VS_VARS_CMD%" || exit /b 1
        where cl || (echo cl.exe not found in PATH && exit /b 1)

    # Configure CMake
    - name: Configure CMake
      run: |
        cmake -B "${{ github.workspace }}/build" \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=Release \
          -G "Ninja" \
          -S "${{ github.workspace }}"

    # Build the project
    - name: Build
      run: cmake --build "${{ github.workspace }}/build" --config Release

    # Run tests
    - name: Test
      working-directory: "${{ github.workspace }}/build"
      run: ctest --output-on-failure --build-config Release
