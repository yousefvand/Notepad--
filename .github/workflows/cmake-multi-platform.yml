name: CI Build

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Install dependencies on Ubuntu
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build qt6-base-dev qt6-tools-dev qt6-tools-dev-tools qt6-l10n-tools libgl1-mesa-dev libglu1-mesa-dev
          echo "CMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu/cmake/Qt6" >> $GITHUB_ENV

      # Install dependencies on macOS
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ninja qt
          echo "CMAKE_PREFIX_PATH=$(brew --prefix qt)" >> $GITHUB_ENV

      # Build and install Qt from source on Windows
      - name: Install dependencies and build Qt from source (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Step 1: Download Qt source
          $qtVersion = "6.5.3"
          $qtSourceUrl = "https://download.qt.io/official_releases/qt/6.5/$qtVersion/single/qt-everywhere-src-$qtVersion.zip"
          $qtSourcePath = "$env:TEMP\qt-everywhere-src.zip"
          Invoke-WebRequest -Uri $qtSourceUrl -OutFile $qtSourcePath -TimeoutSec 1200
          
          # Step 2: Extract source
          Expand-Archive -Path $qtSourcePath -DestinationPath $env:TEMP\qt-source

          # Step 3: Configure and build
          cd "$env:TEMP\qt-source\qt-everywhere-src-$qtVersion"
          .\configure -prefix C:\Qt -release -opensource -confirm-license -nomake examples -nomake tests
          nmake
          nmake install

          # Set up environment variables
          echo "Qt6_DIR=C:\Qt\lib\cmake\Qt6" >> $GITHUB_ENV
          echo "QT_PLUGIN_PATH=C:\Qt\plugins" >> $GITHUB_ENV
          echo "QML2_IMPORT_PATH=C:\Qt\qml" >> $GITHUB_ENV

      - name: Configure CMake
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cmake -B "${{ github.workspace }}\build" -G "Ninja" -S "${{ github.workspace }}" `
            -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DCMAKE_BUILD_TYPE=Release
        env:
          Qt6_DIR: C:\Qt\lib\cmake\Qt6
          QT_PLUGIN_PATH: C:\Qt\plugins
          QML2_IMPORT_PATH: C:\Qt\qml

      - name: Build project (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: cmake --build "${{ github.workspace }}\build" --config Release

      - name: Run tests (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        working-directory: "${{ github.workspace }}\build"
        run: ctest --output-on-failure --build-config Release
