name: Build and Test

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    # Install dependencies for Ubuntu
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build qt6-base-dev qt6-base-dev-tools libgl1-mesa-dev libglu1-mesa-dev
        echo "CMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu/cmake/Qt6" >> $GITHUB_ENV

    # Install dependencies for macOS
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja qt
        echo "CMAKE_PREFIX_PATH=$(brew --prefix qt)" >> $GITHUB_ENV

    # Install Visual Studio Build Tools on Windows
    - name: Set up Visual Studio Build Tools and MSVC (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install visualstudio2019buildtools -y
        choco install ninja -y
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y

        # Locate Visual Studio installation using vswhere.exe
        $vs_path = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" `
          -latest -products * `
          -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `
          -property installationPath

        if (-not $vs_path) {
          Write-Error "Visual Studio Build Tools not found!"
          exit 1
        }

        $vs_vars_cmd = "$vs_path\VC\Auxiliary\Build\vcvars64.bat"
        if (-not (Test-Path $vs_vars_cmd)) {
          Write-Error "Error: vcvars64.bat not found!"
          exit 1
        }

        echo "VS_VARS_CMD=$vs_vars_cmd" >> $GITHUB_ENV
        Write-Host "Visual Studio environment set up successfully."
      shell: powershell

    # Initialize MSVC environment for Windows
    - name: Initialize MSVC environment
      if: matrix.os == 'windows-latest'
      run: |
        call "${{ env.VS_VARS_CMD }}"
      shell: cmd

    # Set reusable build directory
    - name: Set reusable strings
      id: strings
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Configure CMake
    - name: Configure CMake
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=Release \
          -G "Ninja" \
          -S ${{ github.workspace }}
      shell: bash

    # Build the project
    - name: Build
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    # Run tests
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        ctest --output-on-failure --build-config Release
